--logical AND
--logical OR
--Negate (2's complement)
--NOT (1's Complement)

--shift right
--shift right arithmetic
--shift left
--shift left arithmetic
--rotate right
--rotate left


--addition
--subtraction
--multiplication
--division
-- A has Adding, subtracting, multiplying and dividing
-- B has 
library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity ALU is
port(
	control							: in std_logic_vector(12 downto 0);
    A, B     							: in std_logic_vector(31 downto 0);
	C								: out std_logic_vector(31 downto 0);
	zero, carry, overflow			: out std_logic
);
end entity;

architecture behavioural of ALU is
component boothMultiplier()
	port(
	inputA, inputB  : in std_logic_vector(31 downto 0);
	output			: out std_logic_vector(63 downto 0);
	);
end component boothMultiplier;	

signal addResult, subResult, mulResult, divResult 	: std_logic_vector(31 downto 0);
signal shrResult, shraResult, shlResult, rorResult	: std_logic_vector(31 downto 0);
signal rolResult, andResult, orResult, negResult	: std_logic_vector(31 downto 0);
signal notResult	: std_logic_vector(31 downto 0);

begin
addResult <= A+B;
subResult <= A-B;
mulResult <= 
divResult <= 
shrResult <= 
shraResult<=
shlResult <= 
rorResult <= 
rolResult <=  
andResult <= A AND B;
orResult  <= A OR B;
negResult <= 0
notResult <= A 
process(B,control)
begin
	case control is
		when "0000000000001" => --ADD
		when "0000000000010" => --SUB
		when "0000000000100" => --MUL
		when "0000000001000" =>	--DIV
		when "0000000010000" => --SHR
		when "0000000100000" => --SHRA
		when "0000001000000" => --SHL
		when "0000010000000" => --ROR
		when "0000100000000" => --ROL
		when "0001000000000" => --AND
		when "0010000000000" => --OR
		when "0100000000000" => --NEG
		when "1000000000000" => --NOT
	end case;
end process;
end behaviour;	